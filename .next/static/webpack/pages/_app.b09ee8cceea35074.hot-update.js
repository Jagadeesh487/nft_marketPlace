"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./context/NFTMarketplaceContext.js":
/*!******************************************!*\
  !*** ./context/NFTMarketplaceContext.js ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NFTMarketplaceContext: function() { return /* binding */ NFTMarketplaceContext; },\n/* harmony export */   NFTMarketplaceProvider: function() { return /* binding */ NFTMarketplaceProvider; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var web3modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! web3modal */ \"./node_modules/web3modal/dist/index.js\");\n/* harmony import */ var web3modal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(web3modal__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */ \"./context/constants.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var ipfs_http_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ipfs-http-client */ \"./node_modules/ipfs-http-client/src/index.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n//This file is to write the logic\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n// const client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\")\nconst projectId = \"2UeNuKxwLaSqN9bc73LukRrVMtS\";\nconst projectSecretKey = \"48eab2306b59321df23fb0f4d9a7db3c\";\nconst auth = \"Basic \".concat(Buffer.from(\"\".concat(projectId, \":\").concat(projectSecretKey)).toString(\"base64\"));\nconst subdomain = \"https://jagadeeeshnftmarketplace.infura-ipfs.io\";\nconst client = (0,ipfs_http_client__WEBPACK_IMPORTED_MODULE_5__.create)({\n    host: \"infura-ipfs.io\",\n    port: 5001,\n    protocol: \"https\",\n    headers: {\n        authorization: auth\n    }\n});\n// fetching smart contract\nconst fetchContract = (signerOrProvider)=>new ethers__WEBPACK_IMPORTED_MODULE_6__.ethers.Contract(_constants__WEBPACK_IMPORTED_MODULE_4__.NFTMarkertplaceAddress, _constants__WEBPACK_IMPORTED_MODULE_4__.NFTMarketplaceABI, signerOrProvider);\n//connectin eith samrt contract\nconst connectingWithSmartContract = async ()=>{\n    try {\n        const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n        const connection = await web3Modal.connect();\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_6__.ethers.providers.Web3Provider(connection);\n        const signer = provider.getSigner();\n        const contract = fetchContract(signer);\n        return contract;\n    } catch (error) {\n        console.log(\"Sonething went worong while connecting with Smart Contract\");\n    }\n};\nconst NFTMarketplaceContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createContext();\nconst NFTMarketplaceProvider = (param)=>{\n    let { children } = param;\n    _s();\n    const titleData = \"Discover, collect, and sell NFTs\";\n    // const checkContract = async () => {\n    //     const contract = await connectingWithSmartContract();\n    //     console.log(contract);\n    // }\n    //actual function starts hear\n    const [currentAccount, setCurrentAccount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_3__.useRouter)();\n    //function for checking whether wallet is connected or not\n    const checkIfWalletConnected = async ()=>{\n        try {\n            if (!window.ethereum) return console.log(\"Install MetaMask\");\n            const accounts = await window.ethereum.request({\n                method: \"eth_accounts\"\n            });\n            if (accounts.length) {\n                setCurrentAccount(accounts[0]);\n            } else {\n                console.log(\"No Account Found\");\n            }\n            console.log(currentAccount);\n        } catch (error) {\n            console.log(\"Something went worong while connecting to wallet\");\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        checkIfWalletConnected();\n    }, []);\n    //fucntion to click and connet to wallet\n    const connectWallet = async ()=>{\n        try {\n            if (!window.ethereum) return console.log(\"Install MetaMask\");\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n            setCurrentAccount(accounts[0]);\n        // window.location.reload();\n        } catch (error) {\n            console.log(\"Error while connection to wallet throught button\");\n        }\n    };\n    //function to upload images to IPFS\n    const uploadToIPFS = async (file)=>{\n        try {\n            const added = await client.add({\n                content: file\n            });\n            const url = \"\".concat(subdomain, \"/ipfs/\").concat(added.path);\n            return url;\n        } catch (error) {\n            console.log(\"Error Uploading to IPFS\", error);\n        }\n    };\n    //create nft function\n    const createNFT = async (name, price, image, description, router)=>{\n        if (!name || !description || !price || !image) return console.log(\"Data is Missing\");\n        const data = JSON.stringify({\n            name,\n            description,\n            image\n        });\n        try {\n            const added = await client.add(data);\n            const url = \"https://infura-ipfs.io/ipfs/\".concat(added.path);\n            await createSale(url, price);\n        } catch (error) {\n            console.log(error);\n        }\n    };\n    //createSale function\n    const createSale = async (url, formInputPrice, isReselling, id)=>{\n        const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n        const connection = await web3Modal.connect();\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_6__.ethers.providers.Web3Provider(connection);\n        console.log(provider.contract(address));\n        try {\n            const price = ethers__WEBPACK_IMPORTED_MODULE_6__.ethers.utils.parseUnits(formInputPrice, \"ether\");\n            const contract = await connectingWithSmartContract();\n            const listingPrice = await contract.getListingPrice();\n            const transaction = !isReselling ? await contract.createToken(url, price, {\n                value: listingPrice.toString()\n            }) : await contract.reSellToken(url, price, {\n                value: listingPrice.toString()\n            });\n            await transaction.wait();\n            // router.push('/searchPage')\n            console.log(transaction);\n        } catch (error) {\n            // console.log(provider.getCode(address));\n            console.log(\"error while creating sale\", error);\n        }\n    };\n    //fetch nfts function--to fetch the nfts\n    const fetchNFTs = async ()=>{\n        try {\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_6__.ethers.providers.JsonRpcProvider();\n            const contract = fetchContract(provider);\n            const data = await contract.fetchmarketItem();\n            // console.log(data);\n            const items = await Promise.all(data.map(async (param)=>{\n                let { tokenId, seller, owner, price: unformattedPrice } = param;\n                const tokenURI = await contract.tokenURI(tokenId);\n                const { data: { image, name, description } } = await axios__WEBPACK_IMPORTED_MODULE_7__[\"default\"].get(tokenURI);\n                const price = ethers__WEBPACK_IMPORTED_MODULE_6__.ethers.utils.formatUnits(unformattedPrice.toString(), \"ether\");\n                return {\n                    price,\n                    tokenId: tokenId.toNumber(),\n                    seller,\n                    owner,\n                    image,\n                    name,\n                    description,\n                    tokenURI\n                };\n            }));\n            return items;\n        } catch (error) {\n            console.log(\"Eror while fetching NFT's\");\n        }\n    };\n    // useEffect(() => {\n    //     fetchNFTs();    \n    // }, [])\n    //fetch my nft or listed nft\n    const fetchMyNFTORListeeNFTs = async (type)=>{\n        try {\n            const contract = await connectingWithSmartContract();\n            const data = type == \"fetchItemsListed\" ? await contract.fetchItemsListed() : await contract.fetchMyNFT();\n            const items = await Promise.all(data.map(async (param)=>{\n                let { tokenId, seller, owner, price: unformattedPrice } = param;\n                const tokenURI = await contract.tokenURI(tokenId);\n                const { data: { image, name, description } } = await axios__WEBPACK_IMPORTED_MODULE_7__[\"default\"].get(tokenURI);\n                const price = ethers__WEBPACK_IMPORTED_MODULE_6__.ethers.utils.formatUnits(unformattedPrice.toString(), \"ether\");\n                return {\n                    price,\n                    tokenId: tokenId.toNumber(),\n                    seller,\n                    owner,\n                    image,\n                    name,\n                    description,\n                    tokenURI\n                };\n            }));\n            return items;\n        } catch (error) {\n            console.log(\"Error while Fectching listed NFT's\");\n        }\n    };\n    //funtion to buy nft\n    const buyNFT = async (nft)=>{\n        try {\n            const contract = await connectingWithSmartContract();\n            const price = ethers__WEBPACK_IMPORTED_MODULE_6__.ethers.utils.parseUnits(nft.price.toString(), \"ether\");\n            const transaction = await contract.createMarketSale(nft.tokenId, {\n                value: price\n            });\n            await transaction.wait();\n        } catch (error) {\n            console.log(\"Erroe occured while buying nft\");\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(NFTMarketplaceContext.Provider, {\n        value: {\n            checkIfWalletConnected,\n            connectWallet,\n            uploadToIPFS,\n            createNFT,\n            fetchNFTs,\n            fetchMyNFTORListeeNFTs,\n            buyNFT,\n            currentAccount,\n            // checkContract,\n            titleData\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\sivag\\\\OneDrive\\\\Desktop\\\\Jagadeesh\\\\web3\\\\code\\\\nft_marketPlace\\\\context\\\\NFTMarketplaceContext.js\",\n        lineNumber: 266,\n        columnNumber: 9\n    }, undefined);\n};\n_s(NFTMarketplaceProvider, \"ZFidi1dS9HLuBc0UddB1AaXgwKg=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_3__.useRouter\n    ];\n});\n_c = NFTMarketplaceProvider;\nvar _c;\n$RefreshReg$(_c, \"NFTMarketplaceProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNNUMsU0FBU3NFLGdCQUFnQixDQUFDRCxJQUFJYixPQUFPLEVBQUM7Z0JBQzVEVixPQUFPakI7WUFDWDtZQUNBLE1BQU1lLFlBQVlJLElBQUk7UUFDMUIsRUFDQSxPQUFNL0MsT0FBTTtZQUNSQyxRQUFRQyxHQUFHLENBQUM7UUFDaEI7SUFDSjtJQUVBLHFCQUNJLDhEQUFDQyxzQkFBc0JtRSxRQUFRO1FBQUN6QixPQUFTO1lBQ3JDbEM7WUFDQU87WUFDQUM7WUFDQU87WUFDQXNCO1lBQ0FlO1lBQ0FJO1lBQ0EzRDtZQUNBLGlCQUFpQjtZQUNqQkQ7UUFBUztrQkFDUkQ7Ozs7OztBQUdiLEVBQUM7R0FuT1lEOztRQVlNckMsa0RBQVNBOzs7S0FaZnFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2NvbnRleHQvTkZUTWFya2V0cGxhY2VDb250ZXh0LmpzP2Q5OWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy9UaGlzIGZpbGUgaXMgdG8gd3JpdGUgdGhlIGxvZ2ljXHJcbmltcG9ydCBSZWFjdCwge3VzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNvbnRleHR9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgV2ViM01vZGFsIGZyb20gXCJ3ZWIzbW9kYWxcIjtcclxuaW1wb3J0IHsgZXRoZXJzfSBmcm9tICdldGhlcnMnXHJcbmltcG9ydCB7dXNlUm91dGVyfSBmcm9tICduZXh0L3JvdXRlcic7XHJcbmltcG9ydCB7TkZUTWFya2VydHBsYWNlQWRkcmVzcywgTkZUTWFya2V0cGxhY2VBQkl9IGZyb20gJy4vY29uc3RhbnRzJ1xyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnXHJcbmltcG9ydCB7Y3JlYXRlIGFzIGlwZnNIdHRwQ2xpZW50fSBmcm9tICdpcGZzLWh0dHAtY2xpZW50J1xyXG5cclxuLy8gY29uc3QgY2xpZW50ID0gaXBmc0h0dHBDbGllbnQoXCJodHRwczovL2lwZnMuaW5mdXJhLmlvOjUwMDEvYXBpL3YwXCIpXHJcblxyXG5jb25zdCBwcm9qZWN0SWQgPSBcIjJVZU51S3h3TGFTcU45YmM3M0x1a1JyVk10U1wiXHJcbmNvbnN0IHByb2plY3RTZWNyZXRLZXkgPSBcIjQ4ZWFiMjMwNmI1OTMyMWRmMjNmYjBmNGQ5YTdkYjNjXCJcclxuY29uc3QgYXV0aCA9IGBCYXNpYyAke0J1ZmZlci5mcm9tKGAke3Byb2plY3RJZH06JHtwcm9qZWN0U2VjcmV0S2V5fWApLnRvU3RyaW5nKFxyXG4gICAgJ2Jhc2U2NCdcclxuKX1gO1xyXG5cclxuY29uc3Qgc3ViZG9tYWluID0gXCJodHRwczovL2phZ2FkZWVlc2huZnRtYXJrZXRwbGFjZS5pbmZ1cmEtaXBmcy5pb1wiXHJcblxyXG5jb25zdCBjbGllbnQgPSBpcGZzSHR0cENsaWVudCh7XHJcbiAgICBob3N0OiBcImluZnVyYS1pcGZzLmlvXCIsXHJcbiAgICBwb3J0OiA1MDAxLFxyXG4gICAgcHJvdG9jb2w6IFwiaHR0cHNcIixcclxuICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBhdXRob3JpemF0aW9uOiBhdXRoLFxyXG4gICAgfVxyXG59KVxyXG5cclxuXHJcbi8vIGZldGNoaW5nIHNtYXJ0IGNvbnRyYWN0XHJcbmNvbnN0IGZldGNoQ29udHJhY3QgPSAoc2lnbmVyT3JQcm92aWRlcikgPT4gbmV3IGV0aGVycy5Db250cmFjdChcclxuICAgIE5GVE1hcmtlcnRwbGFjZUFkZHJlc3MsXHJcbiAgICBORlRNYXJrZXRwbGFjZUFCSSxcclxuICAgIHNpZ25lck9yUHJvdmlkZXJcclxuKVxyXG5cclxuLy9jb25uZWN0aW4gZWl0aCBzYW1ydCBjb250cmFjdFxyXG5jb25zdCBjb25uZWN0aW5nV2l0aFNtYXJ0Q29udHJhY3QgPSBhc3luYygpID0+IHtcclxuICAgIHRyeXtcclxuICAgICAgICBjb25zdCB3ZWIzTW9kYWwgPSBuZXcgV2ViM01vZGFsKCk7XHJcbiAgICAgICAgY29uc3QgY29ubmVjdGlvbiA9IGF3YWl0IHdlYjNNb2RhbC5jb25uZWN0KCk7XHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgZXRoZXJzLnByb3ZpZGVycy5XZWIzUHJvdmlkZXIoY29ubmVjdGlvbik7ICAgICAgICBcclxuICAgICAgICBjb25zdCBzaWduZXIgPSAgcHJvdmlkZXIuZ2V0U2lnbmVyKCk7XHJcbiAgICAgICAgY29uc3QgY29udHJhY3QgPSBmZXRjaENvbnRyYWN0KHNpZ25lcik7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRyYWN0OyAgICAgICAgIFxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKXtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIlNvbmV0aGluZyB3ZW50IHdvcm9uZyB3aGlsZSBjb25uZWN0aW5nIHdpdGggU21hcnQgQ29udHJhY3RcIilcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE5GVE1hcmtldHBsYWNlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoKTtcclxuZXhwb3J0IGNvbnN0IE5GVE1hcmtldHBsYWNlUHJvdmlkZXIgPSAoe2NoaWxkcmVufSkgPT4ge1xyXG4gICAgY29uc3QgdGl0bGVEYXRhID0gXCJEaXNjb3ZlciwgY29sbGVjdCwgYW5kIHNlbGwgTkZUc1wiO1xyXG5cclxuICAgIC8vIGNvbnN0IGNoZWNrQ29udHJhY3QgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyAgICAgY29uc3QgY29udHJhY3QgPSBhd2FpdCBjb25uZWN0aW5nV2l0aFNtYXJ0Q29udHJhY3QoKTtcclxuICAgIC8vICAgICBjb25zb2xlLmxvZyhjb250cmFjdCk7XHJcbiAgICAvLyB9XHJcblxyXG5cclxuXHJcbiAgICAvL2FjdHVhbCBmdW5jdGlvbiBzdGFydHMgaGVhclxyXG4gICAgY29uc3QgW2N1cnJlbnRBY2NvdW50LCBzZXRDdXJyZW50QWNjb3VudF0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICAgIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xyXG5cclxuICAgIC8vZnVuY3Rpb24gZm9yIGNoZWNraW5nIHdoZXRoZXIgd2FsbGV0IGlzIGNvbm5lY3RlZCBvciBub3RcclxuICAgIGNvbnN0IGNoZWNrSWZXYWxsZXRDb25uZWN0ZWQgPSBhc3luYygpID0+IHtcclxuICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgIGlmICghd2luZG93LmV0aGVyZXVtKSByZXR1cm4gY29uc29sZS5sb2coXCJJbnN0YWxsIE1ldGFNYXNrXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IHdpbmRvdy5ldGhlcmV1bS5yZXF1ZXN0KHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJldGhfYWNjb3VudHNcIlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGFjY291bnRzLmxlbmd0aCl7XHJcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50QWNjb3VudChhY2NvdW50c1swXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTm8gQWNjb3VudCBGb3VuZFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjdXJyZW50QWNjb3VudClcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2goZXJyb3Ipe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNvbWV0aGluZyB3ZW50IHdvcm9uZyB3aGlsZSBjb25uZWN0aW5nIHRvIHdhbGxldFwiKVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBjaGVja0lmV2FsbGV0Q29ubmVjdGVkKCk7XHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgLy9mdWNudGlvbiB0byBjbGljayBhbmQgY29ubmV0IHRvIHdhbGxldFxyXG4gICAgY29uc3QgY29ubmVjdFdhbGxldCA9IGFzeW5jKCkgPT4ge1xyXG4gICAgICAgIHRyeXtcclxuICAgICAgICAgICAgaWYgKCF3aW5kb3cuZXRoZXJldW0pIHJldHVybiBjb25zb2xlLmxvZyhcIkluc3RhbGwgTWV0YU1hc2tcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjY291bnRzID0gYXdhaXQgd2luZG93LmV0aGVyZXVtLnJlcXVlc3Qoe1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcImV0aF9yZXF1ZXN0QWNjb3VudHNcIlxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHNldEN1cnJlbnRBY2NvdW50KGFjY291bnRzWzBdKTtcclxuICAgICAgICAgICAgLy8gd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2goZXJyb3Ipe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yIHdoaWxlIGNvbm5lY3Rpb24gdG8gd2FsbGV0IHRocm91Z2h0IGJ1dHRvblwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9mdW5jdGlvbiB0byB1cGxvYWQgaW1hZ2VzIHRvIElQRlNcclxuICAgIGNvbnN0IHVwbG9hZFRvSVBGUyA9IGFzeW5jKGZpbGUpID0+IHtcclxuICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgIGNvbnN0IGFkZGVkID0gYXdhaXQgY2xpZW50LmFkZCh7Y29udGVudDogZmlsZX0pO1xyXG4gICAgICAgICAgICBjb25zdCB1cmwgPSBgJHtzdWJkb21haW59L2lwZnMvJHthZGRlZC5wYXRofWA7XHJcbiAgICAgICAgICAgIHJldHVybiB1cmw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcil7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3IgVXBsb2FkaW5nIHRvIElQRlNcIiwgKGVycm9yKSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9jcmVhdGUgbmZ0IGZ1bmN0aW9uXHJcbiAgICBjb25zdCBjcmVhdGVORlQgPSBhc3luYyhcclxuICAgICAgICBuYW1lLFxyXG4gICAgICAgIHByaWNlLFxyXG4gICAgICAgIGltYWdlLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICAgIHJvdXRlcikgPT4geyAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmKCFuYW1lIHx8ICFkZXNjcmlwdGlvbiB8fCAhcHJpY2UgfHwgIWltYWdlKVxyXG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2coXCJEYXRhIGlzIE1pc3NpbmdcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnN0cmluZ2lmeSh7bmFtZSwgZGVzY3JpcHRpb24sIGltYWdlfSlcclxuICAgICAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWRkZWQgPSBhd2FpdCBjbGllbnQuYWRkKGRhdGEpO1xyXG4gICAgICAgICAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9pbmZ1cmEtaXBmcy5pby9pcGZzLyR7YWRkZWQucGF0aH1gO1xyXG4gICAgICAgICAgICBhd2FpdCBjcmVhdGVTYWxlKHVybCwgcHJpY2UpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2goZXJyb3Ipe1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9jcmVhdGVTYWxlIGZ1bmN0aW9uXHJcbiAgICBjb25zdCBjcmVhdGVTYWxlID0gYXN5bmModXJsLCBmb3JtSW5wdXRQcmljZSwgaXNSZXNlbGxpbmcsIGlkKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgd2ViM01vZGFsID0gbmV3IFdlYjNNb2RhbCgpO1xyXG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBhd2FpdCB3ZWIzTW9kYWwuY29ubmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IGV0aGVycy5wcm92aWRlcnMuV2ViM1Byb3ZpZGVyKGNvbm5lY3Rpb24pO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHByb3ZpZGVyLmNvbnRyYWN0KGFkZHJlc3MpKTtcclxuICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgIGNvbnN0IHByaWNlID0gZXRoZXJzLnV0aWxzLnBhcnNlVW5pdHMoZm9ybUlucHV0UHJpY2UsIFwiZXRoZXJcIik7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb250cmFjdCA9IGF3YWl0IGNvbm5lY3RpbmdXaXRoU21hcnRDb250cmFjdCgpO1xyXG4gICAgICAgICAgICBjb25zdCBsaXN0aW5nUHJpY2UgPSBhd2FpdCBjb250cmFjdC5nZXRMaXN0aW5nUHJpY2UoKTtcclxuICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSAhaXNSZXNlbGxpbmcgPyBcclxuICAgICAgICAgICAgYXdhaXQgY29udHJhY3QuY3JlYXRlVG9rZW4odXJsLCBwcmljZSx7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogbGlzdGluZ1ByaWNlLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgYXdhaXQgY29udHJhY3QucmVTZWxsVG9rZW4odXJsLCBwcmljZSx7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogbGlzdGluZ1ByaWNlLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBhd2FpdCB0cmFuc2FjdGlvbi53YWl0KCk7XHJcbiAgICAgICAgICAgIC8vIHJvdXRlci5wdXNoKCcvc2VhcmNoUGFnZScpXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRyYW5zYWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2goZXJyb3Ipe1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhwcm92aWRlci5nZXRDb2RlKGFkZHJlc3MpKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvciB3aGlsZSBjcmVhdGluZyBzYWxlXCIsIChlcnJvcikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL2ZldGNoIG5mdHMgZnVuY3Rpb24tLXRvIGZldGNoIHRoZSBuZnRzXHJcbiAgICBjb25zdCBmZXRjaE5GVHMgID0gYXN5bmMoKSA9PiB7XHJcbiAgICAgICAgdHJ5e1xyXG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBldGhlcnMucHJvdmlkZXJzLkpzb25ScGNQcm92aWRlcigpO1xyXG4gICAgICAgICAgICBjb25zdCBjb250cmFjdCA9IGZldGNoQ29udHJhY3QocHJvdmlkZXIpO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgY29udHJhY3QuZmV0Y2htYXJrZXRJdGVtKCk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBhd2FpdCBQcm9taXNlLmFsbChcclxuICAgICAgICAgICAgICAgIGRhdGEubWFwKGFzeW5jKHt0b2tlbklkLCBzZWxsZXIsIG93bmVyLCBwcmljZTogdW5mb3JtYXR0ZWRQcmljZX0pPT57XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW5VUkkgPSBhd2FpdCBjb250cmFjdC50b2tlblVSSSh0b2tlbklkKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgaW1hZ2UsIG5hbWUsIGRlc2NyaXB0aW9ufSxcclxuICAgICAgICAgICAgICAgICAgICB9ID0gYXdhaXQgYXhpb3MuZ2V0KHRva2VuVVJJKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmljZSA9IGV0aGVycy51dGlscy5mb3JtYXRVbml0cyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5mb3JtYXR0ZWRQcmljZS50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImV0aGVyXCJcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybntcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuSWQ6IHRva2VuSWQudG9OdW1iZXIoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsbGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvd25lcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlblVSSSxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtcztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2goZXJyb3Ipe1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVyb3Igd2hpbGUgZmV0Y2hpbmcgTkZUJ3NcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAvLyAgICAgZmV0Y2hORlRzKCk7ICAgIFxyXG4gICAgLy8gfSwgW10pXHJcblxyXG4gICAgLy9mZXRjaCBteSBuZnQgb3IgbGlzdGVkIG5mdFxyXG4gICAgY29uc3QgZmV0Y2hNeU5GVE9STGlzdGVlTkZUcyA9IGFzeW5jKHR5cGUpID0+IHtcclxuICAgICAgICB0cnl7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRyYWN0ID0gYXdhaXQgY29ubmVjdGluZ1dpdGhTbWFydENvbnRyYWN0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0eXBlID09IFwiZmV0Y2hJdGVtc0xpc3RlZFwiID8gXHJcbiAgICAgICAgICAgIGF3YWl0IGNvbnRyYWN0LmZldGNoSXRlbXNMaXN0ZWQoKVxyXG4gICAgICAgICAgICA6XHJcbiAgICAgICAgICAgIGF3YWl0IGNvbnRyYWN0LmZldGNoTXlORlQoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gYXdhaXQgUHJvbWlzZS5hbGwoXHJcbiAgICAgICAgICAgICAgICBkYXRhLm1hcChhc3luYyh7dG9rZW5JZCwgc2VsbGVyLCBvd25lciwgcHJpY2U6IHVuZm9ybWF0dGVkUHJpY2V9KT0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuVVJJID0gYXdhaXQgY29udHJhY3QudG9rZW5VUkkodG9rZW5JZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3R7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtpbWFnZSwgbmFtZSwgZGVzY3JpcHRpb259LFxyXG4gICAgICAgICAgICAgICAgICAgIH0gPSBhd2FpdCBheGlvcy5nZXQodG9rZW5VUkkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlID0gZXRoZXJzLnV0aWxzLmZvcm1hdFVuaXRzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bmZvcm1hdHRlZFByaWNlLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXRoZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbklkOiB0b2tlbklkLnRvTnVtYmVyKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGxlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3duZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5VUkksXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICByZXR1cm4gaXRlbXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoKGVycm9yKXtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvciB3aGlsZSBGZWN0Y2hpbmcgbGlzdGVkIE5GVCdzXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBcclxuXHJcbiAgICAvL2Z1bnRpb24gdG8gYnV5IG5mdFxyXG4gICAgY29uc3QgYnV5TkZUID0gYXN5bmMgKG5mdCkgPT4ge1xyXG4gICAgICAgIHRyeXtcclxuICAgICAgICAgICAgY29uc3QgY29udHJhY3QgPSBhd2FpdCBjb25uZWN0aW5nV2l0aFNtYXJ0Q29udHJhY3QoKTtcclxuICAgICAgICAgICAgY29uc3QgcHJpY2UgPSBldGhlcnMudXRpbHMucGFyc2VVbml0cyhuZnQucHJpY2UudG9TdHJpbmcoKSwgXCJldGhlclwiKTtcclxuICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSBhd2FpdCBjb250cmFjdC5jcmVhdGVNYXJrZXRTYWxlKG5mdC50b2tlbklkLHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBwcmljZSxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgYXdhaXQgdHJhbnNhY3Rpb24ud2FpdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaChlcnJvcil7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb2Ugb2NjdXJlZCB3aGlsZSBidXlpbmcgbmZ0XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8TkZUTWFya2V0cGxhY2VDb250ZXh0LlByb3ZpZGVyIHZhbHVlID0ge3tcclxuICAgICAgICAgICAgY2hlY2tJZldhbGxldENvbm5lY3RlZCxcclxuICAgICAgICAgICAgY29ubmVjdFdhbGxldCxcclxuICAgICAgICAgICAgdXBsb2FkVG9JUEZTLFxyXG4gICAgICAgICAgICBjcmVhdGVORlQsXHJcbiAgICAgICAgICAgIGZldGNoTkZUcyxcclxuICAgICAgICAgICAgZmV0Y2hNeU5GVE9STGlzdGVlTkZUcyxcclxuICAgICAgICAgICAgYnV5TkZULFxyXG4gICAgICAgICAgICBjdXJyZW50QWNjb3VudCxcclxuICAgICAgICAgICAgLy8gY2hlY2tDb250cmFjdCxcclxuICAgICAgICAgICAgdGl0bGVEYXRhfX0+XHJcbiAgICAgICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgICA8L05GVE1hcmtldHBsYWNlQ29udGV4dC5Qcm92aWRlcj5cclxuICAgIClcclxufSJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidXNlQ29udGV4dCIsIldlYjNNb2RhbCIsImV0aGVycyIsInVzZVJvdXRlciIsIk5GVE1hcmtlcnRwbGFjZUFkZHJlc3MiLCJORlRNYXJrZXRwbGFjZUFCSSIsImF4aW9zIiwiY3JlYXRlIiwiaXBmc0h0dHBDbGllbnQiLCJwcm9qZWN0SWQiLCJwcm9qZWN0U2VjcmV0S2V5IiwiYXV0aCIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsInN1YmRvbWFpbiIsImNsaWVudCIsImhvc3QiLCJwb3J0IiwicHJvdG9jb2wiLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsImZldGNoQ29udHJhY3QiLCJzaWduZXJPclByb3ZpZGVyIiwiQ29udHJhY3QiLCJjb25uZWN0aW5nV2l0aFNtYXJ0Q29udHJhY3QiLCJ3ZWIzTW9kYWwiLCJjb25uZWN0aW9uIiwiY29ubmVjdCIsInByb3ZpZGVyIiwicHJvdmlkZXJzIiwiV2ViM1Byb3ZpZGVyIiwic2lnbmVyIiwiZ2V0U2lnbmVyIiwiY29udHJhY3QiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJORlRNYXJrZXRwbGFjZUNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiTkZUTWFya2V0cGxhY2VQcm92aWRlciIsImNoaWxkcmVuIiwidGl0bGVEYXRhIiwiY3VycmVudEFjY291bnQiLCJzZXRDdXJyZW50QWNjb3VudCIsInJvdXRlciIsImNoZWNrSWZXYWxsZXRDb25uZWN0ZWQiLCJ3aW5kb3ciLCJldGhlcmV1bSIsImFjY291bnRzIiwicmVxdWVzdCIsIm1ldGhvZCIsImxlbmd0aCIsImNvbm5lY3RXYWxsZXQiLCJ1cGxvYWRUb0lQRlMiLCJmaWxlIiwiYWRkZWQiLCJhZGQiLCJjb250ZW50IiwidXJsIiwicGF0aCIsImNyZWF0ZU5GVCIsIm5hbWUiLCJwcmljZSIsImltYWdlIiwiZGVzY3JpcHRpb24iLCJkYXRhIiwiSlNPTiIsInN0cmluZ2lmeSIsImNyZWF0ZVNhbGUiLCJmb3JtSW5wdXRQcmljZSIsImlzUmVzZWxsaW5nIiwiaWQiLCJhZGRyZXNzIiwidXRpbHMiLCJwYXJzZVVuaXRzIiwibGlzdGluZ1ByaWNlIiwiZ2V0TGlzdGluZ1ByaWNlIiwidHJhbnNhY3Rpb24iLCJjcmVhdGVUb2tlbiIsInZhbHVlIiwicmVTZWxsVG9rZW4iLCJ3YWl0IiwiZmV0Y2hORlRzIiwiSnNvblJwY1Byb3ZpZGVyIiwiZmV0Y2htYXJrZXRJdGVtIiwiaXRlbXMiLCJQcm9taXNlIiwiYWxsIiwibWFwIiwidG9rZW5JZCIsInNlbGxlciIsIm93bmVyIiwidW5mb3JtYXR0ZWRQcmljZSIsInRva2VuVVJJIiwiZ2V0IiwiZm9ybWF0VW5pdHMiLCJ0b051bWJlciIsImZldGNoTXlORlRPUkxpc3RlZU5GVHMiLCJ0eXBlIiwiZmV0Y2hJdGVtc0xpc3RlZCIsImZldGNoTXlORlQiLCJidXlORlQiLCJuZnQiLCJjcmVhdGVNYXJrZXRTYWxlIiwiUHJvdmlkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./context/NFTMarketplaceContext.js\n"));

/***/ })

});